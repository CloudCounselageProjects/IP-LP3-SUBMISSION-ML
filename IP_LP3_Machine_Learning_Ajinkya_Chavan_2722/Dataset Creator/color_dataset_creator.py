# -*- coding: utf-8 -*-
"""Color Dataset Creator.ipynb

Automatically generated by Colaboratory.



# Importing Libraries & Initialization
"""

#Importing Libraries
import matplotlib.pyplot as plt
import matplotlib.patches as patches
import random
import pandas as pd
import numpy as np

#Initialisation at First Time Execution
data = []
red, green, blue, label = [], [], [], []
counter = 0 #color_index in df
first_time = 0 #flag for first time execution
df = pd.DataFrame()

# Allows a user to classify colors as labeled data, will write data.csv to store this
def generate_random_rgb(): 
    #Returns a tuple of three RGB values on range [0,1]
    #This is done because  matplotlib.patches take rgb values in range [0,1] -> eg: color=(0,0.5,1) 
    #The uniform() method returns a random floating number between the two specified numbers (both included).
    return (random.uniform(0,1), random.uniform(0,1), random.uniform(0,1)) 

def convert_to_rgb(input):
    #Converts an RGB value on [0,1] to a more common [0, 255]
    return (int(input[0] * 255), int(input[1] * 255), int(input[2] * 255))

# Creation of dataset 
def colorDataCreator():
    print('''
    Label(not case-sensitive) the Color as follows:
    r : Red
    g : Green
    b : Blue
    y : Yellow
    o : Orange
    p : Pink
    pu : Purple
    gr : Grey
    w : White
    bl : Black
    br : Brown
    ''')

    global counter, red, green, blue, label, data, df, first_time
    if first_time == 0 :
        red.clear()
        green.clear()
        blue.clear()
        label.clear()
    #we want to start a loop that puts up a rect of a random rgb and then asks user for class
    while(True):
        if(counter == 0):
            first_time=1
        rgb = generate_random_rgb()
        fig = plt.figure()
        ax = fig.add_subplot(111, aspect='equal')
        ax.xaxis.set_visible(False) # Disable axis x 
        ax.yaxis.set_visible(False) # Disable axis y
        ax.add_patch(patches.Rectangle((0,0), 1, 1, color=rgb))
        plt.show(block=False)
        answer = input('Color(' + str(counter) + "): ").upper()

        if(answer == "DONE"):
            break
        else:
            label += [answer]
            converted = convert_to_rgb(rgb)
            red += [converted[0]]
            green += [converted[1]]
            blue += [converted[2]]
        plt.close()
        counter += 1

    data = {'red': red, 'green': green, 'blue': blue, 'label': label}
    df = pd.DataFrame(data=data)
    if(first_time == 1):
        df.to_csv('/content/data.csv', index=False, header=True) #index is set to False so that separate index column is not made in csv file 
        first_time=0 #reset first_time flag
    else:
        df.to_csv('/content/data.csv', mode='a', index=False, header=False) # mode='a' for append & header=False for not appending column names as entry
    print('Done!')

"""# Dataset Creation"""

colorDataCreator()

d = pd.read_csv('data.csv')
d

#Generate more values for Dataset 
colorDataCreator()

#Checking if entries are reflecting in data.csv 
ds = pd.read_csv('data.csv')
ds

#Download Dataset
from google.colab import files
files.download("data.csv")

colorDataCreator()

#Checking if entries are reflecting in data.csv 
ds2 = pd.read_csv('data.csv')
ds2

#Download Dataset
from google.colab import files
files.download("data.csv")

"""Similarly Create more entries for the Dataset"""

colorDataCreator()

ls

#Download Dataset
from google.colab import files
files.download("data.csv")

"""# For Continuing to make Entries in Dataset after Disconnect From Colab"""

import matplotlib.pyplot as plt
import matplotlib.patches as patches
import random
import pandas as pd
import numpy as np

#Upload dataset to Colab from Local Disk 
from google.colab import files
data_to_upload = files.upload()

ls

#Display imported dataset
import io
df2 = pd.read_csv(io.BytesIO(data_to_upload['data.csv']))
df2

#Finding index for next entry or total nummber of entries
import csv
file = open("data.csv")
reader = csv.reader(file)
entries= (len(list(reader)) - 1) # -1 to exclude header entry row
entries

#Initialisation after Loading Dataset
data = []
red, green, blue, label = [], [], [], []
counter = entries #(dataset.lastindex + 1 which is same as he number of entries in csv file )
first_time = 0 #flag for first execution
df = pd.DataFrame()

colorDataCreator()

#Checking if entries are reflecting in data.csv 
df3 = pd.read_csv('data.csv')
df3

"""# Entries from index=1105 and forward"""

#Finding index for next entry or total nummber of entries
import csv
file = open("data.csv")
reader = csv.reader(file)
entries= (len(list(reader)) - 1) # -1 to exclude header entry row

#Initialisation after Loading Dataset
data = []
red, green, blue, label = [], [], [], []
counter = entries #(dataset.lastindex + 1 which is same as he number of entries in csv file )
first_time = 0 #flag for first execution
df = pd.DataFrame()

colorDataCreator()

#Finding index for next entry or total nummber of entries
import csv
file = open("data.csv")
reader = csv.reader(file)
entries= (len(list(reader)) - 1) # -1 to exclude header entry row

#Initialisation after Loading Dataset
data = []
red, green, blue, label = [], [], [], []
counter = entries #(dataset.lastindex + 1 which is same as he number of entries in csv file )
first_time = 0 #flag for first execution
df = pd.DataFrame()

colorDataCreator()

colorDataCreator()

colorDataCreator()

colorDataCreator()

colorDataCreator()

colorDataCreator()

colorDataCreator()

colorDataCreator()

colorDataCreator()

colorDataCreator()

#Finding index for next entry or total nummber of entries
import csv
file = open("data.csv")
reader = csv.reader(file)
entries= (len(list(reader)) - 1) # -1 to exclude header entry row

#Initialisation after Loading Dataset
data = []
red, green, blue, label = [], [], [], []
counter = entries #(dataset.lastindex + 1 which is same as he number of entries in csv file )
first_time = 0 #flag for first execution
df = pd.DataFrame()

colorDataCreator()

colorDataCreator()

colorDataCreator()

colorDataCreator()

colorDataCreator()

colorDataCreator()

colorDataCreator()

"""# Expanding the acronym to the color name in `label` column"""

dataframe = pd.read_csv('data.csv')
dataframe

dataframe.label.unique()

"""Renaming the Label of Colors as follows:
    R : Red
    G : Green
    B : Blue
    Y : Yellow
    O : Orange
    P : Pink
    PU : Purple
    GR : Grey
    W : White
    BL : Black
    BR : Brown
"""

dataframe=dataframe.replace(to_replace='R', value='Red')
dataframe=dataframe.replace(to_replace='G', value='Green')
dataframe=dataframe.replace(to_replace='B', value='Blue')
dataframe=dataframe.replace(to_replace='Y', value='Yellow')
dataframe=dataframe.replace(to_replace='O', value='Orange')
dataframe=dataframe.replace(to_replace='P', value='Pink')
dataframe=dataframe.replace(to_replace='PU', value='Purple')
dataframe=dataframe.replace(to_replace='GR', value='Grey')
dataframe=dataframe.replace(to_replace='W', value='White')
dataframe=dataframe.replace(to_replace='BL', value='Black')
dataframe=dataframe.replace(to_replace='BR', value='Brown')
dataframe

"""# Download Dataset"""

dataframe.to_csv('final_data.csv', index=False)

#Download Dataset
from google.colab import files
files.download("final_data.csv")
