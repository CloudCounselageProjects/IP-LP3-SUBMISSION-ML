# -*- coding: utf-8 -*-
"""RGB_Color_Identification

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1srpMRg-9qxnh7w-LuCOEDmRgfne-ZPdp
"""

import numpy as np
import matplotlib.pyplot as plt
import os
import cv2

# lets look at the data
Data = "/Color Dataset/train"
categories = ["BLUE","GREEN","RED"]

# lets check some images in the dataset
for cat in categories:
  path = os.path.join(Data,cat)  # path to color dataset
  for img in os.listdir(path):
    img_array = cv2.imread(os.path.join(path,img))
    plt.imshow(img_array)
    break
  break

# resizing images to 50x50
new_array = cv2.resize(img_array,(50,50))
plt.imshow(new_array)

"""### Lets Create Training data
we are going to create training data with the images and also going to resize every image to 50x50. As they are simple color images we don't need high dimension images.
"""

training_data = [] # list of data
for cat in categories:
  path = os.path.join(Data,cat)  # path to color dataset
  class_RGB = categories.index(cat)
  for img in os.listdir(path):
    img_array = cv2.imread(os.path.join(path,img))
    try:
        new_array = cv2.resize(img_array,(50,50))
        training_data.append([new_array,class_RGB])
    except:
      pass

# lets check the length of trianing data as we have 
# 41 images in each RED,GREEN, BLUE (123 images total).
print(len(training_data))

# lets shuffle the data 
import random
random.shuffle(training_data)

# lets seperate the feature and label into two variables X and Y
X = []
Y = []

for features,label in training_data:
  X.append(features)
  Y.append(label)

X = np.array(X).reshape(-1,50,50,3)
Y = np.array(Y)

X.shape

"""### Model Development
we are going to us Tensorflow to develop the model.
"""

import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense,Dropout,Flatten,Conv2D,MaxPool2D,InputLayer,BatchNormalization

model = Sequential()
model.add(Flatten())
model.add(Dense(128,activation = 'relu'))
model.add(Dense(128,activation = 'relu'))
model.add(Dense(1,Activation('softmax')))

model.compile(loss = 'categorical_crossentropy',
              optimizer = 'adam', 
              metrics = ['accuracy'])

model.fit(X,Y,batch_size = 4,epochs = 10,validation_split = 0.1)

"""#### Testing data"""

path = '/Color Dataset/test'
test_data = [] # list of data

for img in os.listdir(path):
  img_array_test = cv2.imread(os.path.join(path,img))
  try: 
     new_array_test = cv2.resize(img_array_test,(50,50))
     test_data.append([new_array_test])
  except:
     pass
test_data = np.array(test_data).reshape(-1,50,50,3)

preds =model.predict_classes(test_data)

#lets check a random image and its label
plt.imshow(test_data[11])
plt.xlabel(categories[int(preds[4])])